#[doc = "Register `CR2` reader"]
pub type R = crate::R<CR2_SPEC>;
#[doc = "Register `CR2` writer"]
pub type W = crate::W<CR2_SPEC>;
#[doc = "Capture/compare DMA selection\n\nValue on reset: 0"]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum CCDS_A {
    #[doc = "0: CCx DMA request sent when CCx event occurs"]
    B_0x0 = 0,
    #[doc = "1: CCx DMA requests sent when update event occurs"]
    B_0x1 = 1,
}
impl From<CCDS_A> for bool {
    #[inline(always)]
    fn from(variant: CCDS_A) -> Self {
        variant as u8 != 0
    }
}
#[doc = "Field `CCDS` reader - Capture/compare DMA selection"]
pub type CCDS_R = crate::BitReader<CCDS_A>;
impl CCDS_R {
    #[doc = "Get enumerated values variant"]
    #[inline(always)]
    pub const fn variant(&self) -> CCDS_A {
        match self.bits {
            false => CCDS_A::B_0x0,
            true => CCDS_A::B_0x1,
        }
    }
    #[doc = "CCx DMA request sent when CCx event occurs"]
    #[inline(always)]
    pub fn is_B_0x0(&self) -> bool {
        *self == CCDS_A::B_0x0
    }
    #[doc = "CCx DMA requests sent when update event occurs"]
    #[inline(always)]
    pub fn is_B_0x1(&self) -> bool {
        *self == CCDS_A::B_0x1
    }
}
#[doc = "Field `CCDS` writer - Capture/compare DMA selection"]
pub type CCDS_W<'a, REG> = crate::BitWriter<'a, REG, CCDS_A>;
impl<'a, REG> CCDS_W<'a, REG>
where
    REG: crate::Writable + crate::RegisterSpec,
{
    #[doc = "CCx DMA request sent when CCx event occurs"]
    #[inline(always)]
    pub fn B_0x0(self) -> &'a mut crate::W<REG> {
        self.variant(CCDS_A::B_0x0)
    }
    #[doc = "CCx DMA requests sent when update event occurs"]
    #[inline(always)]
    pub fn B_0x1(self) -> &'a mut crate::W<REG> {
        self.variant(CCDS_A::B_0x1)
    }
}
#[doc = "Master mode selection These bits allow to select the information to be sent in master mode to slave timers for synchronization (tim_trgo). The combination is as follows: tim_trgo, except if the master/slave mode is selected (see the MSM bit description in TIMx_SMCR register). Others: Reserved Note: The clock of the slave timer or ADC must be enabled prior to receive events from the master timer, and must not be changed on-the-fly while triggers are received from the master timer.\n\nValue on reset: 0"]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
#[repr(u8)]
pub enum MMS1_A {
    #[doc = "0: Reset - the UG bit from the TIMx_EGR register is used as trigger output (tim_trgo). If the reset is generated by the trigger input (slave mode controller configured in reset mode) then the signal on tim_trgo is delayed compared to the actual reset."]
    B_0x0 = 0,
    #[doc = "1: Enable - the Counter enable signal, CNT_EN, is used as trigger output (tim_trgo). It is useful to start several timers at the same time or to control a window in which a slave timer is enabled. The Counter Enable signal is generated by a logic AND between CEN control bit and the trigger input when configured in gated mode.When the Counter Enable signal is controlled by the trigger input, there is a delay on"]
    B_0x1 = 1,
    #[doc = "2: Update - The update event is selected as trigger output (tim_trgo). For instance a master timer can then be used as a prescaler for a slave timer."]
    B_0x2 = 2,
    #[doc = "3: Compare Pulse - The trigger output send a positive pulse when the CC1IF flag is to be set (even if it was already high), as soon as a capture or a compare match occurred (tim_trgo)."]
    B_0x3 = 3,
    #[doc = "4: Compare - tim_oc1refc signal is used as trigger output (tim_trgo)"]
    B_0x4 = 4,
    #[doc = "5: Compare - tim_oc2refc signal is used as trigger output (tim_trgo)"]
    B_0x5 = 5,
    #[doc = "6: Compare - tim_oc3refc signal is used as trigger output (tim_trgo)"]
    B_0x6 = 6,
    #[doc = "7: Compare - tim_oc4refc signal is used as trigger output (tim_trgo)"]
    B_0x7 = 7,
}
impl From<MMS1_A> for u8 {
    #[inline(always)]
    fn from(variant: MMS1_A) -> Self {
        variant as _
    }
}
impl crate::FieldSpec for MMS1_A {
    type Ux = u8;
}
impl crate::IsEnum for MMS1_A {}
#[doc = "Field `MMS1` reader - Master mode selection These bits allow to select the information to be sent in master mode to slave timers for synchronization (tim_trgo). The combination is as follows: tim_trgo, except if the master/slave mode is selected (see the MSM bit description in TIMx_SMCR register). Others: Reserved Note: The clock of the slave timer or ADC must be enabled prior to receive events from the master timer, and must not be changed on-the-fly while triggers are received from the master timer."]
pub type MMS1_R = crate::FieldReader<MMS1_A>;
impl MMS1_R {
    #[doc = "Get enumerated values variant"]
    #[inline(always)]
    pub const fn variant(&self) -> MMS1_A {
        match self.bits {
            0 => MMS1_A::B_0x0,
            1 => MMS1_A::B_0x1,
            2 => MMS1_A::B_0x2,
            3 => MMS1_A::B_0x3,
            4 => MMS1_A::B_0x4,
            5 => MMS1_A::B_0x5,
            6 => MMS1_A::B_0x6,
            7 => MMS1_A::B_0x7,
            _ => unreachable!(),
        }
    }
    #[doc = "Reset - the UG bit from the TIMx_EGR register is used as trigger output (tim_trgo). If the reset is generated by the trigger input (slave mode controller configured in reset mode) then the signal on tim_trgo is delayed compared to the actual reset."]
    #[inline(always)]
    pub fn is_B_0x0(&self) -> bool {
        *self == MMS1_A::B_0x0
    }
    #[doc = "Enable - the Counter enable signal, CNT_EN, is used as trigger output (tim_trgo). It is useful to start several timers at the same time or to control a window in which a slave timer is enabled. The Counter Enable signal is generated by a logic AND between CEN control bit and the trigger input when configured in gated mode.When the Counter Enable signal is controlled by the trigger input, there is a delay on"]
    #[inline(always)]
    pub fn is_B_0x1(&self) -> bool {
        *self == MMS1_A::B_0x1
    }
    #[doc = "Update - The update event is selected as trigger output (tim_trgo). For instance a master timer can then be used as a prescaler for a slave timer."]
    #[inline(always)]
    pub fn is_B_0x2(&self) -> bool {
        *self == MMS1_A::B_0x2
    }
    #[doc = "Compare Pulse - The trigger output send a positive pulse when the CC1IF flag is to be set (even if it was already high), as soon as a capture or a compare match occurred (tim_trgo)."]
    #[inline(always)]
    pub fn is_B_0x3(&self) -> bool {
        *self == MMS1_A::B_0x3
    }
    #[doc = "Compare - tim_oc1refc signal is used as trigger output (tim_trgo)"]
    #[inline(always)]
    pub fn is_B_0x4(&self) -> bool {
        *self == MMS1_A::B_0x4
    }
    #[doc = "Compare - tim_oc2refc signal is used as trigger output (tim_trgo)"]
    #[inline(always)]
    pub fn is_B_0x5(&self) -> bool {
        *self == MMS1_A::B_0x5
    }
    #[doc = "Compare - tim_oc3refc signal is used as trigger output (tim_trgo)"]
    #[inline(always)]
    pub fn is_B_0x6(&self) -> bool {
        *self == MMS1_A::B_0x6
    }
    #[doc = "Compare - tim_oc4refc signal is used as trigger output (tim_trgo)"]
    #[inline(always)]
    pub fn is_B_0x7(&self) -> bool {
        *self == MMS1_A::B_0x7
    }
}
#[doc = "Field `MMS1` writer - Master mode selection These bits allow to select the information to be sent in master mode to slave timers for synchronization (tim_trgo). The combination is as follows: tim_trgo, except if the master/slave mode is selected (see the MSM bit description in TIMx_SMCR register). Others: Reserved Note: The clock of the slave timer or ADC must be enabled prior to receive events from the master timer, and must not be changed on-the-fly while triggers are received from the master timer."]
pub type MMS1_W<'a, REG> = crate::FieldWriter<'a, REG, 3, MMS1_A, crate::Safe>;
impl<'a, REG> MMS1_W<'a, REG>
where
    REG: crate::Writable + crate::RegisterSpec,
    REG::Ux: From<u8>,
{
    #[doc = "Reset - the UG bit from the TIMx_EGR register is used as trigger output (tim_trgo). If the reset is generated by the trigger input (slave mode controller configured in reset mode) then the signal on tim_trgo is delayed compared to the actual reset."]
    #[inline(always)]
    pub fn B_0x0(self) -> &'a mut crate::W<REG> {
        self.variant(MMS1_A::B_0x0)
    }
    #[doc = "Enable - the Counter enable signal, CNT_EN, is used as trigger output (tim_trgo). It is useful to start several timers at the same time or to control a window in which a slave timer is enabled. The Counter Enable signal is generated by a logic AND between CEN control bit and the trigger input when configured in gated mode.When the Counter Enable signal is controlled by the trigger input, there is a delay on"]
    #[inline(always)]
    pub fn B_0x1(self) -> &'a mut crate::W<REG> {
        self.variant(MMS1_A::B_0x1)
    }
    #[doc = "Update - The update event is selected as trigger output (tim_trgo). For instance a master timer can then be used as a prescaler for a slave timer."]
    #[inline(always)]
    pub fn B_0x2(self) -> &'a mut crate::W<REG> {
        self.variant(MMS1_A::B_0x2)
    }
    #[doc = "Compare Pulse - The trigger output send a positive pulse when the CC1IF flag is to be set (even if it was already high), as soon as a capture or a compare match occurred (tim_trgo)."]
    #[inline(always)]
    pub fn B_0x3(self) -> &'a mut crate::W<REG> {
        self.variant(MMS1_A::B_0x3)
    }
    #[doc = "Compare - tim_oc1refc signal is used as trigger output (tim_trgo)"]
    #[inline(always)]
    pub fn B_0x4(self) -> &'a mut crate::W<REG> {
        self.variant(MMS1_A::B_0x4)
    }
    #[doc = "Compare - tim_oc2refc signal is used as trigger output (tim_trgo)"]
    #[inline(always)]
    pub fn B_0x5(self) -> &'a mut crate::W<REG> {
        self.variant(MMS1_A::B_0x5)
    }
    #[doc = "Compare - tim_oc3refc signal is used as trigger output (tim_trgo)"]
    #[inline(always)]
    pub fn B_0x6(self) -> &'a mut crate::W<REG> {
        self.variant(MMS1_A::B_0x6)
    }
    #[doc = "Compare - tim_oc4refc signal is used as trigger output (tim_trgo)"]
    #[inline(always)]
    pub fn B_0x7(self) -> &'a mut crate::W<REG> {
        self.variant(MMS1_A::B_0x7)
    }
}
#[doc = "tim_ti1 selection\n\nValue on reset: 0"]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum TI1S_A {
    #[doc = "0: The tim_ti1_in\\[15..0\\] multiplexer output is to tim_ti1 input"]
    B_0x0 = 0,
    #[doc = "1: The tim_ti1_in\\[15..0\\], tim_ti2_in\\[15..0\\] and tim_ti3_in\\[15..0\\] multiplexers outputs are XORed and connected to the tim_ti1 input. See also sensors on page 558."]
    B_0x1 = 1,
}
impl From<TI1S_A> for bool {
    #[inline(always)]
    fn from(variant: TI1S_A) -> Self {
        variant as u8 != 0
    }
}
#[doc = "Field `TI1S` reader - tim_ti1 selection"]
pub type TI1S_R = crate::BitReader<TI1S_A>;
impl TI1S_R {
    #[doc = "Get enumerated values variant"]
    #[inline(always)]
    pub const fn variant(&self) -> TI1S_A {
        match self.bits {
            false => TI1S_A::B_0x0,
            true => TI1S_A::B_0x1,
        }
    }
    #[doc = "The tim_ti1_in\\[15..0\\] multiplexer output is to tim_ti1 input"]
    #[inline(always)]
    pub fn is_B_0x0(&self) -> bool {
        *self == TI1S_A::B_0x0
    }
    #[doc = "The tim_ti1_in\\[15..0\\], tim_ti2_in\\[15..0\\] and tim_ti3_in\\[15..0\\] multiplexers outputs are XORed and connected to the tim_ti1 input. See also sensors on page 558."]
    #[inline(always)]
    pub fn is_B_0x1(&self) -> bool {
        *self == TI1S_A::B_0x1
    }
}
#[doc = "Field `TI1S` writer - tim_ti1 selection"]
pub type TI1S_W<'a, REG> = crate::BitWriter<'a, REG, TI1S_A>;
impl<'a, REG> TI1S_W<'a, REG>
where
    REG: crate::Writable + crate::RegisterSpec,
{
    #[doc = "The tim_ti1_in\\[15..0\\] multiplexer output is to tim_ti1 input"]
    #[inline(always)]
    pub fn B_0x0(self) -> &'a mut crate::W<REG> {
        self.variant(TI1S_A::B_0x0)
    }
    #[doc = "The tim_ti1_in\\[15..0\\], tim_ti2_in\\[15..0\\] and tim_ti3_in\\[15..0\\] multiplexers outputs are XORed and connected to the tim_ti1 input. See also sensors on page 558."]
    #[inline(always)]
    pub fn B_0x1(self) -> &'a mut crate::W<REG> {
        self.variant(TI1S_A::B_0x1)
    }
}
#[doc = "Master mode selection These bits allow to select the information to be sent in master mode to slave timers for synchronization (tim_trgo). The combination is as follows: tim_trgo, except if the master/slave mode is selected (see the MSM bit description in TIMx_SMCR register). Others: Reserved Note: The clock of the slave timer or ADC must be enabled prior to receive events from the master timer, and must not be changed on-the-fly while triggers are received from the master timer.\n\nValue on reset: 0"]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum MMS2_A {
    #[doc = "0: Reset - the UG bit from the TIMx_EGR register is used as trigger output (tim_trgo). If the reset is generated by the trigger input (slave mode controller configured in reset mode) then the signal on tim_trgo is delayed compared to the actual reset."]
    B_0x0 = 0,
    #[doc = "1: Enable - the Counter enable signal, CNT_EN, is used as trigger output (tim_trgo). It is useful to start several timers at the same time or to control a window in which a slave timer is enabled. The Counter Enable signal is generated by a logic AND between CEN control bit and the trigger input when configured in gated mode.When the Counter Enable signal is controlled by the trigger input, there is a delay on"]
    B_0x1 = 1,
}
impl From<MMS2_A> for bool {
    #[inline(always)]
    fn from(variant: MMS2_A) -> Self {
        variant as u8 != 0
    }
}
#[doc = "Field `MMS2` reader - Master mode selection These bits allow to select the information to be sent in master mode to slave timers for synchronization (tim_trgo). The combination is as follows: tim_trgo, except if the master/slave mode is selected (see the MSM bit description in TIMx_SMCR register). Others: Reserved Note: The clock of the slave timer or ADC must be enabled prior to receive events from the master timer, and must not be changed on-the-fly while triggers are received from the master timer."]
pub type MMS2_R = crate::BitReader<MMS2_A>;
impl MMS2_R {
    #[doc = "Get enumerated values variant"]
    #[inline(always)]
    pub const fn variant(&self) -> MMS2_A {
        match self.bits {
            false => MMS2_A::B_0x0,
            true => MMS2_A::B_0x1,
        }
    }
    #[doc = "Reset - the UG bit from the TIMx_EGR register is used as trigger output (tim_trgo). If the reset is generated by the trigger input (slave mode controller configured in reset mode) then the signal on tim_trgo is delayed compared to the actual reset."]
    #[inline(always)]
    pub fn is_B_0x0(&self) -> bool {
        *self == MMS2_A::B_0x0
    }
    #[doc = "Enable - the Counter enable signal, CNT_EN, is used as trigger output (tim_trgo). It is useful to start several timers at the same time or to control a window in which a slave timer is enabled. The Counter Enable signal is generated by a logic AND between CEN control bit and the trigger input when configured in gated mode.When the Counter Enable signal is controlled by the trigger input, there is a delay on"]
    #[inline(always)]
    pub fn is_B_0x1(&self) -> bool {
        *self == MMS2_A::B_0x1
    }
}
#[doc = "Field `MMS2` writer - Master mode selection These bits allow to select the information to be sent in master mode to slave timers for synchronization (tim_trgo). The combination is as follows: tim_trgo, except if the master/slave mode is selected (see the MSM bit description in TIMx_SMCR register). Others: Reserved Note: The clock of the slave timer or ADC must be enabled prior to receive events from the master timer, and must not be changed on-the-fly while triggers are received from the master timer."]
pub type MMS2_W<'a, REG> = crate::BitWriter<'a, REG, MMS2_A>;
impl<'a, REG> MMS2_W<'a, REG>
where
    REG: crate::Writable + crate::RegisterSpec,
{
    #[doc = "Reset - the UG bit from the TIMx_EGR register is used as trigger output (tim_trgo). If the reset is generated by the trigger input (slave mode controller configured in reset mode) then the signal on tim_trgo is delayed compared to the actual reset."]
    #[inline(always)]
    pub fn B_0x0(self) -> &'a mut crate::W<REG> {
        self.variant(MMS2_A::B_0x0)
    }
    #[doc = "Enable - the Counter enable signal, CNT_EN, is used as trigger output (tim_trgo). It is useful to start several timers at the same time or to control a window in which a slave timer is enabled. The Counter Enable signal is generated by a logic AND between CEN control bit and the trigger input when configured in gated mode.When the Counter Enable signal is controlled by the trigger input, there is a delay on"]
    #[inline(always)]
    pub fn B_0x1(self) -> &'a mut crate::W<REG> {
        self.variant(MMS2_A::B_0x1)
    }
}
impl R {
    #[doc = "Bit 3 - Capture/compare DMA selection"]
    #[inline(always)]
    pub fn CCDS(&self) -> CCDS_R {
        CCDS_R::new(((self.bits >> 3) & 1) != 0)
    }
    #[doc = "Bits 4:6 - Master mode selection These bits allow to select the information to be sent in master mode to slave timers for synchronization (tim_trgo). The combination is as follows: tim_trgo, except if the master/slave mode is selected (see the MSM bit description in TIMx_SMCR register). Others: Reserved Note: The clock of the slave timer or ADC must be enabled prior to receive events from the master timer, and must not be changed on-the-fly while triggers are received from the master timer."]
    #[inline(always)]
    pub fn MMS1(&self) -> MMS1_R {
        MMS1_R::new(((self.bits >> 4) & 7) as u8)
    }
    #[doc = "Bit 7 - tim_ti1 selection"]
    #[inline(always)]
    pub fn TI1S(&self) -> TI1S_R {
        TI1S_R::new(((self.bits >> 7) & 1) != 0)
    }
    #[doc = "Bit 25 - Master mode selection These bits allow to select the information to be sent in master mode to slave timers for synchronization (tim_trgo). The combination is as follows: tim_trgo, except if the master/slave mode is selected (see the MSM bit description in TIMx_SMCR register). Others: Reserved Note: The clock of the slave timer or ADC must be enabled prior to receive events from the master timer, and must not be changed on-the-fly while triggers are received from the master timer."]
    #[inline(always)]
    pub fn MMS2(&self) -> MMS2_R {
        MMS2_R::new(((self.bits >> 25) & 1) != 0)
    }
}
impl W {
    #[doc = "Bit 3 - Capture/compare DMA selection"]
    #[inline(always)]
    pub fn CCDS(&mut self) -> CCDS_W<'_, CR2_SPEC> {
        CCDS_W::new(self, 3)
    }
    #[doc = "Bits 4:6 - Master mode selection These bits allow to select the information to be sent in master mode to slave timers for synchronization (tim_trgo). The combination is as follows: tim_trgo, except if the master/slave mode is selected (see the MSM bit description in TIMx_SMCR register). Others: Reserved Note: The clock of the slave timer or ADC must be enabled prior to receive events from the master timer, and must not be changed on-the-fly while triggers are received from the master timer."]
    #[inline(always)]
    pub fn MMS1(&mut self) -> MMS1_W<'_, CR2_SPEC> {
        MMS1_W::new(self, 4)
    }
    #[doc = "Bit 7 - tim_ti1 selection"]
    #[inline(always)]
    pub fn TI1S(&mut self) -> TI1S_W<'_, CR2_SPEC> {
        TI1S_W::new(self, 7)
    }
    #[doc = "Bit 25 - Master mode selection These bits allow to select the information to be sent in master mode to slave timers for synchronization (tim_trgo). The combination is as follows: tim_trgo, except if the master/slave mode is selected (see the MSM bit description in TIMx_SMCR register). Others: Reserved Note: The clock of the slave timer or ADC must be enabled prior to receive events from the master timer, and must not be changed on-the-fly while triggers are received from the master timer."]
    #[inline(always)]
    pub fn MMS2(&mut self) -> MMS2_W<'_, CR2_SPEC> {
        MMS2_W::new(self, 25)
    }
}
#[doc = "TIM3 control register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`cr2::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cr2::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
pub struct CR2_SPEC;
impl crate::RegisterSpec for CR2_SPEC {
    type Ux = u32;
}
#[doc = "`read()` method returns [`cr2::R`](R) reader structure"]
impl crate::Readable for CR2_SPEC {}
#[doc = "`write(|w| ..)` method takes [`cr2::W`](W) writer structure"]
impl crate::Writable for CR2_SPEC {
    type Safety = crate::Safe;
}
#[doc = "`reset()` method sets CR2 to value 0"]
impl crate::Resettable for CR2_SPEC {}
